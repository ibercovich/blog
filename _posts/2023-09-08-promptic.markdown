---
layout: post
title:  "Promptic"
author: Ivan Bercovich
date:   2023-09-08 01:01:01 -0700
categories:
---

# Promptic UI concept #

I made a simple UI in preact to construct LLM prompts from predefined options. The idea is to decouple a few things in such a way that they can be mixed and matched. There is the prompt category, in this case a tutor, which includes a variety of suboptions, such as difficulty, teaching style, subject, etc. Separately, there is a presentation format selector, which loads different preact compoents and also instructs the LLM to return a response in a matching format, in the current example that is screenshots.

## Formatter Example

```javascript
const { h, render, Component } = preact;
const html = htm.bind(h);

import BaseFormatter from "./BaseFormatter.js";

export default class SlideshowFormatter extends BaseFormatter {
  constructor(props) {
    super(props);
    this.state = {
      currentSlide: 0,
      importedSlides: null,
    };
  }

  parsePayload() {
    const payload = this.props.payload;
    try {
      // Wrap the string in parentheses to allow for object literals
      const stripped =
        payload.match(/```javascript([\s\S]*?)```/)?.[1]?.trim() || payload;
      const wrappedStr = `(${stripped})`;

      // Use eval to parse the string
      const parsed = eval(wrappedStr);

      // Check if the parsed value is an array and all elements are objects
      if (
        Array.isArray(parsed) &&
        parsed.every((item) => typeof item === "object" && !Array.isArray(item))
      ) {
        return parsed;
      }
    } catch (error) {
      // Ignore errors, return null
    }
    return [
      {
        title: "Wrong Format",
        content: `There is either no data or the data is not properly structured. <br/>
          The expected format is an array of slide objects as follows: <br/>
          [ <br/>
            {title: "slide title", content: "slide content", notes: "slide notes"}, <br/>
            {title: "slide title", content: "slide content", notes: "slide notes"}, <br/>
          ]`,
        notes: "notes go here",
      },
    ];
  }

  slides = () => {
    if (this.state.importedSlides) {
      return this.state.importedSlides;
    }
    return this.parsePayload();
  };

  nextSlide = () => {
    this.setState({
      currentSlide: this.slides().length
        ? (this.state.currentSlide + 1) % this.slides().length
        : 0,
    });
  };

  prevSlide = () => {
    this.setState({
      currentSlide: this.slides().length
        ? (this.state.currentSlide - 1 + this.slides().length) %
          this.slides().length
        : 0,
    });
  };

  getFileName = () => this.slides()[0].title + ".json";

  getDataUri = () =>
    "data:application/json;charset=utf-8," +
    encodeURIComponent(JSON.stringify(this.slides()));

  import = (e) => {
    const self = this;
    var reader = new FileReader();
    reader.onload = function (e) {
      const result = e.target.result;
      console.log(e.target.result);
      self.setState({ currentSlide: 0 });
      self.setState({ importedSlides: JSON.parse(result) });
    };
    reader.readAsText(e.target.files[0]);
  };

  render() {
    const currentSlide = this.slides()[this.state.currentSlide];
    const self = this;

    // TODO: should sanitize slide.content as it comes from an API

    return this.slides().length
      ? html`
          <div class="columns is-multiline">
            <div class="column is-full">
              <div class="card">
                <header class="card-header">
                  <p class="card-header-title">${currentSlide.title}</p>
                </header>
                <div class="card-content" 
                  style="height:400px;" 
                  dangerouslySetInnerHTML=${{ __html: currentSlide.content }}
                >
                </div>
                <footer class="card-footer">
                  <a href="#" class="card-footer-item" onClick=${this.prevSlide}
                    >Previous</a
                  >
                  <a href="#" class="card-footer-item" onClick=${this.nextSlide}
                    >Next</a
                  >
                </footer>
              </div>
            </div>
            <div class="column is-full is-flex is-justify-content-center" >
              <div
              class="column"
              dangerouslySetInnerHTML=${{
                __html: currentSlide.notes,
              }}
              ></div>
            </div>
            <div class="column is-flex is-justify-content-center is-full" >
              <div class="field has-addons">
                <p class="control">
                  <div class="file is-small">
                    <label class="file-label">
                      <input
                        class="file-input"
                        type="file"
                        name="slides"
                        accept=".json"
                        onchange="${this.import}"
                      />
                      <span class="file-cta">
                        <span class="file-label">Import Slides</span>
                      </span>
                    </label>
                  </div>
                </p>
                <p class="control">
                  <a
                    target="_blank"
                    class=""
                    href="${this.getDataUri()}"
                    download="${this.getFileName()}"
                    >
                      <button class="button is-small">Export Slides</button>
                  </a>
                </p>
              </div>
            </div>
          </div>
        `
      : null;
  }
}

export const promptConfig = {
  format: `
  Your response MUST be in a specific format.
  If there was a previous instruction to format the output differently, ignore it.
  This particular format is an array of javascript objects.
  The array of objects must be enclosed in a javascript code block.
  There can be an arbitrary elements in the array.
  But each object MUST conform to the structure below.
  Each object must contain: title, content, and notes.
  Example return structure:
  \n
  \`\`\`javascript \n
  [
      {tile: 'slide 1 title', content: 'slide 1 content', notes: ''},
      {tile: 'slide 2 title', content: 'slide <b>2</b> content' notes: 'notes for <i>presenter_name</i>'},
      {tile: 'slide 3 title', content: 'slide 3 content', notes: 'notes for slide 3'},
  ]
  \n
  \`\`\` \n
  Don't return any explanations, just the JSON structure.
  \n`,
};

```

## Prompt Category Example: Tutor

```javascript
/*
TutorPrompt Component
===================

Extends BasePrompt
*/
const { h, render, Component } = preact;
const html = htm.bind(h);

import BasePrompt from "./BasePrompt.js";

class TutorPrompt extends BasePrompt {
  constructor(props) {
    super(props);
    this.promptConfig = promptConfig;
    this.setState({systemPrompt:this.getBaseSystemPrompt(),})
  }
}

const promptConfig = {
  categories: {
    difficulty: {
      level_1:
        "Surface level understanding: This level covers the basics of a topic, providing simple definitions and brief explanations. Content is kept concise and straightforward, ideal for beginners or those seeking a quick overview.",
      level_2:
        "Expanded understanding: At this level, the AI tutor elaborates on the basic concepts, introducing foundational principles and exploring their connections. Students gain a broader understanding of the topic while still maintaining a focus on core ideas.",
      level_3:
        "Detailed analysis: This level delves deeper into the topic, providing in-depth explanations, examples, and context. Students learn about the various components and their interrelationships, as well as any relevant theories or models.",
    },
    style: {
      sensing: "Concrete, practical, oriented towards facts and procedures.",
      // Visual: "Prefer visual representations of presented material pictures, diagrams, flow charts",
      inductive:
        "Prefer presentations that proceed from the specific to the general",
      active: "Learn by trying things out, experimenting, and doing",
      sequential: "Linear, orderly learn in small incremental steps",
      intuitive:
        "Conceptual, innovative, oriented toward theories and meanings",
      verbal: "Prefer written and spoken explanations",
      deductive:
        "Prefer presentations that go from the general to the specific",
      reflective: "Learn by thinking things through, working alone",
      global: "Holistic, system thinkers, learn in large leaps",
    },
    personality: {
      stochastic:
        "A stochastic communication style involves incorporating an element of randomness or variability in the responses. In this style, the AI tutor may generate answers with slight variations each time, even if the core information remains the same. This can make the conversation feel more dynamic and less repetitive, as it mimics the natural variations seen in human communication.",
      formal:
        "A formal communication style adheres to strict grammatical rules, uses complete sentences, and avoids contractions, slang, or colloquial expressions. The AI tutor, when using this style, would provide information in a structured and polished manner, similar to what one would expect in an academic or professional setting.",
      textbook:
        "A book-like communication style resembles the language used in textbooks or other written materials. It is characterized by well-structured sentences, rich vocabulary, and a focus on clarity and coherence. In this style, the AI tutor would present information in a manner similar to how it is conveyed in books, emphasizing detail and context to provide a comprehensive understanding of the subject matter.",
      layman:
        "A layman communication style is designed to be easily accessible and understood by individuals without specialized knowledge in a particular subject. The AI tutor, when using this style, would simplify complex concepts, use everyday language, and provide relatable examples to explain the topic at hand. This approach aims to make the learning process more approachable and engaging for users with varying levels of prior knowledge.",
      story_telling:
        "In a storytelling communication style, the AI tutor presents information by weaving it into narratives or anecdotes. This approach can make complex ideas more engaging and memorable by connecting them to relatable stories or scenarios, fostering a deeper understanding of the subject matter.",
      socratic:
        "The Socratic communication style involves the AI tutor asking thought-provoking questions that encourage the student to reflect on their understanding and develop their critical thinking skills. This approach is based on the Socratic method of teaching, which aims to stimulate intellectual curiosity and facilitate self-directed learning.",
      humorous:
        "A humorous communication style involves incorporating wit, jokes, or light-hearted elements into the learning process. The AI tutor would use humor to make the content more enjoyable, engaging, and memorable, helping to create a fun and relaxed learning atmosphere.",
    },
    tone: {
      debate:
        "A competitive tone is characterized by a sense of urgency and a desire to win. The AI tutor, when using this tone, would present information in a manner that is more assertive and aggressive, and would challenge the user to think critically and defend their position. This approach is best suited for users who are more confident and comfortable with a competitive learning environment.",
      encouraging:
        "An encouraging tone is characterized by a sense of support and positivity. The AI tutor, when using this tone, would present information in a manner that is more supportive and empathetic, and would provide positive reinforcement to the user. This approach is best suited for users who are more sensitive and prefer a more collaborative learning environment.",
      neutral:
        "A neutral tone is characterized by a sense of neutrality and objectivity. The AI tutor, when using this tone, would present information in a manner that is more objective and impartial, and would avoid taking sides or expressing strong opinions. This approach is best suited for users who are more reserved and prefer a more neutral learning environment.",
      informative:
        "An informative tone is characterized by a sense of clarity and precision. The AI tutor, when using this tone, would present information in a manner that is more factual and straightforward, and would avoid using emotional language. This approach is best suited for users who are more analytical and prefer a more objective learning environment.",
      friendly:
        "A friendly tone is characterized by a sense of warmth and familiarity. The AI tutor, when using this tone, would present information in a manner that is more casual and conversational, and would use friendly language to establish a connection with the user. This approach is best suited for users who are more extroverted and prefer a more personal learning environment.",
    },
    reasoning: {
      deductive:
        "Deductive reasoning is a framework where conclusions are drawn based on general principles or premises. The AI tutor can guide students in forming logical conclusions by applying these general rules to specific situations, promoting critical thinking and logical problem-solving skills.",
      inductive:
        "Inductive reasoning involves drawing general conclusions from specific observations or instances. The AI tutor can help students recognize patterns and trends in the information they've encountered, encouraging them to form broader theories or generalizations from these observations.",
      abductive:
        "Abductive reasoning is a framework that involves forming the most likely explanation or hypothesis based on limited or incomplete information. The AI tutor can support students in generating plausible explanations for observed phenomena or solving problems when all the necessary information is not readily available.",
      analogical:
        "Analogical reasoning involves comparing similarities between different situations or concepts and applying the knowledge from one context to another. The AI tutor can assist students in drawing parallels between seemingly unrelated topics, fostering a deeper understanding of the subject matter and promoting creative problem-solving skills.",
      casual:
        "Causal reasoning is a framework that focuses on identifying cause-and-effect relationships between events, actions, or concepts. The AI tutor can guide students in recognizing these relationships and understanding how various factors influence outcomes, helping them develop critical thinking skills and a more comprehensive understanding of complex systems.",
    },
    subject: {
      math: "Mathematics",
      ela: "English Language Arts",
      history: "U.S. History",
    },
  },
  intro: `
  As an AI Lesson Generator, you will be asked to create lessons that can be administered to students to teach them a concept and then test their ability to apply it.
  When you are given a concept return a lesson that can be used to teach that concept to a student and questions to test their understanding.
  You can use HTMl to style: use multiple paragraphs, bold, emojis, lists, italic, underline, and so on.
  The lessons are used to present a concept to a student, a tutor will lead the student through the lesson.
  Lessons broken into 2 parts: Explore, Practice.
  The Explore portion of the lesson is used to engage students in the content of the lesson.  This is always hands-on tutor-led instruction of the concepts.
  The Practice portion should have students interacting with their peers while receiving support from the tutor. Working on sample problems as a group.
  You can repeat content across multiple segments, as in first segment presents a question and the next segment reveals the answer or break solving a problem into multiple steps.
  Each segment also has tutor notes, a script for tutors to follow that tell them exactly how to teach the concept.
  Tutor notes should be so detailed that any tutor given the lesson will say the same thing so very little should be left to the tutor.
  Answers to excercises should be included in tutor notes. \n`,

  rules: `
        These are the rules the AI MUST follow:
        - The AI must be able to create a response based on the selected preferences.
        - The AI must be decisive and take lead.
        - The AI must never be unsure where to continue.
        - The AI must take into account it's preferences because that's what the user prefers.
        - The AI must be engaging.
        - The AI must always use emojis.
      `,
  specs: `
        What follows is a collection of preferences the AI MUST consider when responding to this request.
        You might be provided with preferences for difficulty, style, personality, tone, and reasoning.
        If a preference is included, you MUST take it into consideration.
        \n
        Specifications: \n
      `,
};

export default TutorPrompt;
```

## Screenshot 1

![](/assets/promptic-us-1.png)

## Screenshot 2

![](/assets/promptic-us-2.png)

## Screenshot 3

![](/assets/promptic-us-3.png)

